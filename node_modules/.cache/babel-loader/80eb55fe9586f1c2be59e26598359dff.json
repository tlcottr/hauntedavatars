{"ast":null,"code":"// Defaults\nvar defaultOptions = {\n  format: 'image/png',\n  quality: 0.92,\n  width: undefined,\n  height: undefined,\n  Canvas: undefined,\n  crossOrigin: undefined\n}; // Return Promise\n\nvar mergeImages = function mergeImages(sources, options) {\n  if (sources === void 0) sources = [];\n  if (options === void 0) options = {};\n  return new Promise(function (resolve) {\n    options = Object.assign({}, defaultOptions, options); // Setup browser/Node.js specific variables\n\n    var canvas = options.Canvas ? new options.Canvas() : window.document.createElement('canvas');\n    var Image = options.Image || window.Image; // Load sources\n\n    var images = sources.map(function (source) {\n      return new Promise(function (resolve, reject) {\n        // Convert sources to objects\n        if (source.constructor.name !== 'Object') {\n          source = {\n            src: source\n          };\n        } // Resolve source and img when loaded\n\n\n        var img = new Image();\n        img.crossOrigin = options.crossOrigin;\n\n        img.onerror = function () {\n          return reject(new Error('Couldn\\'t load image'));\n        };\n\n        img.onload = function () {\n          return resolve(Object.assign({}, source, {\n            img: img\n          }));\n        };\n\n        img.src = source.src;\n      });\n    }); // Get canvas context\n\n    var ctx = canvas.getContext('2d'); // When sources have loaded\n\n    resolve(Promise.all(images).then(function (images) {\n      // Set canvas dimensions\n      var getSize = function getSize(dim) {\n        return options[dim] || Math.max.apply(Math, images.map(function (image) {\n          return image.img[dim];\n        }));\n      };\n\n      canvas.width = getSize('width');\n      canvas.height = getSize('height'); // Draw images to canvas\n\n      images.forEach(function (image) {\n        ctx.globalAlpha = image.opacity ? image.opacity : 1;\n        return ctx.drawImage(image.img, image.x || 0, image.y || 0);\n      });\n\n      if (options.Canvas && options.format === 'image/jpeg') {\n        // Resolve data URI for node-canvas jpeg async\n        return new Promise(function (resolve, reject) {\n          canvas.toDataURL(options.format, {\n            quality: options.quality,\n            progressive: false\n          }, function (err, jpeg) {\n            if (err) {\n              reject(err);\n              return;\n            }\n\n            resolve(jpeg);\n          });\n        });\n      } // Resolve all other data URIs sync\n\n\n      return canvas.toDataURL(options.format, options.quality);\n    }));\n  });\n};\n\nexport default mergeImages;","map":{"version":3,"mappings":"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","names":["const","defaultOptions","format","quality","width","undefined","height","Canvas","crossOrigin","mergeImages","sources","options","Promise","resolve","Object","assign","canvas","window","document","createElement","Image","images","map","source","reject","constructor","name","src","img","onerror","Error","onload","ctx","getContext","all","then","getSize","dim","Math","max","apply","image","forEach","globalAlpha","opacity","drawImage","x","y","toDataURL","progressive","err","jpeg"],"sources":["/Users/taylorcottrell/Desktop/Builds/alpaca/node_modules/merge-images/src/index.js"],"sourcesContent":["// Defaults\nconst defaultOptions = {\n\tformat: 'image/png',\n\tquality: 0.92,\n\twidth: undefined,\n\theight: undefined,\n\tCanvas: undefined,\n\tcrossOrigin: undefined\n};\n\n// Return Promise\nconst mergeImages = (sources = [], options = {}) => new Promise(resolve => {\n\toptions = Object.assign({}, defaultOptions, options);\n\n\t// Setup browser/Node.js specific variables\n\tconst canvas = options.Canvas ? new options.Canvas() : window.document.createElement('canvas');\n\tconst Image = options.Image || window.Image;\n\n\t// Load sources\n\tconst images = sources.map(source => new Promise((resolve, reject) => {\n\t\t// Convert sources to objects\n\t\tif (source.constructor.name !== 'Object') {\n\t\t\tsource = { src: source };\n\t\t}\n\n\t\t// Resolve source and img when loaded\n\t\tconst img = new Image();\n\t\timg.crossOrigin = options.crossOrigin;\n\t\timg.onerror = () => reject(new Error('Couldn\\'t load image'));\n\t\timg.onload = () => resolve(Object.assign({}, source, { img }));\n\t\timg.src = source.src;\n\t}));\n\n\t// Get canvas context\n\tconst ctx = canvas.getContext('2d');\n\n\t// When sources have loaded\n\tresolve(Promise.all(images)\n\t\t.then(images => {\n\t\t\t// Set canvas dimensions\n\t\t\tconst getSize = dim => options[dim] || Math.max(...images.map(image => image.img[dim]));\n\t\t\tcanvas.width = getSize('width');\n\t\t\tcanvas.height = getSize('height');\n\n\t\t\t// Draw images to canvas\n\t\t\timages.forEach(image => {\n\t\t\t\tctx.globalAlpha = image.opacity ? image.opacity : 1;\n\t\t\t\treturn ctx.drawImage(image.img, image.x || 0, image.y || 0);\n\t\t\t});\n\n\t\t\tif (options.Canvas && options.format === 'image/jpeg') {\n\t\t\t\t// Resolve data URI for node-canvas jpeg async\n\t\t\t\treturn new Promise((resolve, reject) => {\n\t\t\t\t\tcanvas.toDataURL(options.format, {\n\t\t\t\t\t\tquality: options.quality,\n\t\t\t\t\t\tprogressive: false\n\t\t\t\t\t}, (err, jpeg) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolve(jpeg);\n\t\t\t\t\t});\n\t\t\t\t});\n\t\t\t}\n\n\t\t\t// Resolve all other data URIs sync\n\t\t\treturn canvas.toDataURL(options.format, options.quality);\n\t\t}));\n});\n\nexport default mergeImages;\n"]},"metadata":{},"sourceType":"module"}